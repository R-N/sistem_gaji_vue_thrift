#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class UserRole(object):
    ADMIN_BIASA = 0
    ADMIN_UTAMA = 1
    ADMIN_AKUN = 2
    PENGAWAS = 3
    SUPER_ADMIN = 4

    _VALUES_TO_NAMES = {
        0: "ADMIN_BIASA",
        1: "ADMIN_UTAMA",
        2: "ADMIN_AKUN",
        3: "PENGAWAS",
        4: "SUPER_ADMIN",
    }

    _NAMES_TO_VALUES = {
        "ADMIN_BIASA": 0,
        "ADMIN_UTAMA": 1,
        "ADMIN_AKUN": 2,
        "PENGAWAS": 3,
        "SUPER_ADMIN": 4,
    }


class LoginErrorCode(object):
    USERNAME_KOSONG = 0
    PASSWORD_KOSONG = 1
    USERNAME_PASSWORD_SALAH = 2
    REFRESH_TOKEN_INVALID = 3
    REFRESH_TOKEN_EXPIRED = 4
    ALREADY_LOGGED_IN = 5

    _VALUES_TO_NAMES = {
        0: "USERNAME_KOSONG",
        1: "PASSWORD_KOSONG",
        2: "USERNAME_PASSWORD_SALAH",
        3: "REFRESH_TOKEN_INVALID",
        4: "REFRESH_TOKEN_EXPIRED",
        5: "ALREADY_LOGGED_IN",
    }

    _NAMES_TO_VALUES = {
        "USERNAME_KOSONG": 0,
        "PASSWORD_KOSONG": 1,
        "USERNAME_PASSWORD_SALAH": 2,
        "REFRESH_TOKEN_INVALID": 3,
        "REFRESH_TOKEN_EXPIRED": 4,
        "ALREADY_LOGGED_IN": 5,
    }


class AuthErrorCode(object):
    NOT_LOGGED_IN = 0
    AUTH_TOKEN_INVALID = 1
    AUTH_TOKEN_EXPIRED = 2
    INVALID_ROLE = 3
    NO_PERMISSION = 4

    _VALUES_TO_NAMES = {
        0: "NOT_LOGGED_IN",
        1: "AUTH_TOKEN_INVALID",
        2: "AUTH_TOKEN_EXPIRED",
        3: "INVALID_ROLE",
        4: "NO_PERMISSION",
    }

    _NAMES_TO_VALUES = {
        "NOT_LOGGED_IN": 0,
        "AUTH_TOKEN_INVALID": 1,
        "AUTH_TOKEN_EXPIRED": 2,
        "INVALID_ROLE": 3,
        "NO_PERMISSION": 4,
    }


class User(object):
    """
    Attributes:
     - name
     - role

    """


    def __init__(self, name=None, role=None,):
        self.name = name
        self.role = role

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.role = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('User')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.role is not None:
            oprot.writeFieldBegin('role', TType.I32, 2)
            oprot.writeI32(self.role)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoginResult(object):
    """
    Attributes:
     - auth_token
     - refresh_token

    """


    def __init__(self, auth_token=None, refresh_token=None,):
        self.auth_token = auth_token
        self.refresh_token = refresh_token

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.refresh_token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginResult')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.refresh_token is not None:
            oprot.writeFieldBegin('refresh_token', TType.STRING, 2)
            oprot.writeString(self.refresh_token.encode('utf-8') if sys.version_info[0] == 2 else self.refresh_token)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.auth_token is None:
            raise TProtocolException(message='Required field auth_token is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoginError(TException):
    """
    Attributes:
     - code

    """


    def __init__(self, code=None,):
        self.code = code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginError')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthError(TException):
    """
    Attributes:
     - code

    """


    def __init__(self, code=None,):
        self.code = code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthError')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(User)
User.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'role', None, None, ),  # 2
)
all_structs.append(LoginResult)
LoginResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'refresh_token', 'UTF8', None, ),  # 2
)
all_structs.append(LoginError)
LoginError.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
)
all_structs.append(AuthError)
AuthError.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
)
fix_spec(all_structs)
del all_structs
